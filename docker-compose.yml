version: "3.9"

services:
  client:
    image: ${REGISTRY_PATH}client:${VERSION:-latest}
    container_name: or_client
    build:
      context: ./client
      dockerfile: Dockerfile.client
      tags:
        - ${REGISTRY_PATH}client:${COMMIT_REF:-latest}
      args:
        - API_DOMAIN=${DOMAIN_NAME}
        - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    restart: unless-stopped
    depends_on:
      - django
      - hasura
      - caddy
    networks:
      - caddy_network

  django:
    image: ${REGISTRY_PATH}api:${VERSION:-latest}
    container_name: or_django
    build:
      dockerfile: ./Dockerfile.api
      tags:
        - ${REGISTRY_PATH}api:${COMMIT_REF:-latest}
    restart: unless-stopped
    env_file:
      - path: ./.env
        required: false
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
      - caddy
    networks:
      - postgres_network
      - caddy_network
      - rabbitmq_network
      - redis_network

  worker:
    image: ${REGISTRY_PATH}api:${VERSION:-latest}
    container_name: or_worker
    build:
      dockerfile: ./Dockerfile.api
      tags:
        - ${REGISTRY_PATH}api:${COMMIT_REF:-latest}
    command: python manage.py rundramatiq
    restart: unless-stopped
    env_file:
      - path: ./.env
        required: false
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
      - rabbitmq
    networks:
      - rabbitmq_network
      - postgres_network
      - caddy_network

  caddy:
    image: ${REGISTRY_PATH}caddy:${VERSION:-latest}
    restart: unless-stopped
    build:
      context: ./caddy
      dockerfile: Dockerfile.caddy
      tags:
        - ${REGISTRY_PATH}caddy:${COMMIT_REF:-latest}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./caddy/cert.crt:/etc/pki/tls/certs/cert.crt
      - ./caddy/cert.key:/etc/pki/tls/private/cert.key
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - TLS=${TLS}
      - TLS_KEY=${TLS_KEY}
      - RATE_LIMIT=${RATE_LIMIT}
    container_name: or_caddy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - caddy_network

  db:
    image: postgis/postgis:16-master
    container_name: or_database
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - postgres_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: or_rabbitmq
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    networks:
      - rabbitmq_network
      - caddy_network

  hasura:
    image: ${REGISTRY_PATH}hasura:${VERSION:-latest}
    container_name: or_hasura
    build:
      context: ./hasura
      dockerfile: Dockerfile.hasura
      tags:
        - ${REGISTRY_PATH}hasura:${COMMIT_REF:-latest}
    restart: unless-stopped
    depends_on:
      - "db"
      - "django"
      - "caddy"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${JWT_SECRET_KEY}","claims_namespace":"user_claims","claims_format":"json"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 120
      HASURA_GRAPHQL_CORS_DOMAIN: ${CSRF_TRUSTED_ORIGINS}
      API_HOST: "http://django:9000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - postgres_network
      - caddy_network

  mail:
    container_name: or_plausible_mail
    image: bytemark/smtp
    restart: always
    networks:
      - plausible_network

  plausible_db:
    container_name: or_plausible_postgres
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - plausible_postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PLAUSIBLE_POSTGRES_PASSWORD}
    networks:
      - plausible_network

  plausible_events_db:
    container_name: or_plausible_clickhouse
    image: clickhouse/clickhouse-server:23.3.7.5-alpine
    restart: unless-stopped
    volumes:
      - plausible_clickhouse:/var/lib/clickhouse
      - ./plausible/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro
      - ./plausible/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - plausible_network

  plausible:
    container_name: or_plausible
    image: plausible/analytics:v2.0
    restart: unless-stopped
    command: sh -c "sleep 10 && /entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh run"
    depends_on:
      - plausible_db
      - plausible_events_db
      - mail
      - caddy
    environment:
      - BASE_URL=${PLAUSIBLE_BASE_URL}
      - SECRET_KEY_BASE=${PLAUSIBLE_SECRET_KEY_BASE}
    networks:
      - plausible_network
      - caddy_network

  redis:
    image: redis:7-alpine
    container_name: or_redis
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - redis_network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: or_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "redis"
    networks:
      - caddy_network
      - redis_network

networks:
  caddy_network:
    driver: bridge
  redis_network:
    driver: bridge
  postgres_network:
    driver: bridge
  rabbitmq_network:
    driver: bridge
  plausible_network:
    driver: bridge

volumes:
  postgres:
  rabbitmq:
  caddy_data:
  caddy_config:
  plausible_postgres:
  plausible_clickhouse:
  redis:
