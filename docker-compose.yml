version: "3.9"

services:
  db:
    restart: unless-stopped
    image: kartoza/postgis
    container_name: or_database
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - db_network

  rabbitmq:
    restart: unless-stopped
    image: rabbitmq:management
    container_name: or_rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    networks:
      - db_network

  django:
    restart: unless-stopped
    image: onroadapi:latest
    container_name: or_django
    build:
      context: .
      dockerfile: Dockerfile.api
    volumes:
      - static:/app/static
    env_file:
      - ./.env
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
    networks:
      - db_network

  worker:
    restart: unless-stopped
    image: onroadapi:latest
    container_name: or_worker
    build:
      context: .
      dockerfile: Dockerfile.api
    command: python manage.py rundramatiq
    volumes:
      - static:/app/static
    env_file:
      - ./.env
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
      - rabbitmq
    networks:
      - db_network

  hasura:
    restart: unless-stopped
    image: hasura/graphql-engine:latest.cli-migrations-v3
    container_name: or_hasura
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata
    depends_on:
      - "db"
      - "django"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${JWT_SECRET_KEY}","claims_namespace":"user_claims","claims_format":"json"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 120
      API_HOST: "http://django:9000"
    networks:
      - db_network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # client:
  #   restart: unless-stopped
  #   image: onroadclient:latest
  #   container_name: or_client
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.client
  #   depends_on:
  #     - hasura
  #   networks:
  #     - db_network

  caddy:
    restart: unless-stopped
    image: webserver:latest
    container_name: or_caddy
    build:
      context: .
      dockerfile: Dockerfile.caddy
    volumes:
      - static:/static/djstatic
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
      - hasura
    networks:
      - db_network

  pgadmin:
    restart: unless-stopped
    image: dpage/pgadmin4
    container_name: or_admin
    links:
      - db
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: m.bagwala@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "4000:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - db_network

networks:
  db_network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  rabbitmq:
  static:
