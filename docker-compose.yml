version: "3.9"

services:
  client:
    image: onroadclient:latest
    container_name: or_client
    build:
      context: ./client
      dockerfile: Dockerfile.client
      # tags:
      #   - registry.digitalocean.com/or-main/client:latest
      args:
        - API_DOMAIN=${DOMAIN_NAME}
        - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    restart: unless-stopped
    depends_on:
      - django
      - hasura
    networks:
      - db_network

  django:
    image: onroadapi:latest
    container_name: or_django
    build:
      dockerfile: ./Dockerfile.api
      # tags:
      #   - registry.digitalocean.com/or-main/api:latest
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
    networks:
      - db_network

  worker:
    image: onroadapi:latest
    container_name: or_worker
    build:
      dockerfile: ./Dockerfile.api
      # tags:
      #   - registry.digitalocean.com/or-main/api:latest
    command: python manage.py rundramatiq
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
      - rabbitmq
    networks:
      - db_network

  caddy:
    restart: unless-stopped
    image: onroadcaddy:latest
    build:
      context: ./caddy
      dockerfile: Dockerfile.caddy
      # tags:
      #   - registry.digitalocean.com/or-main/caddy:latest
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./caddy/cert.crt:/etc/pki/tls/certs/cert.crt
      - ./caddy/cert.key:/etc/pki/tls/private/cert.key
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - TLS=${TLS}
      - TLS_KEY=${TLS_KEY}
    container_name: or_caddy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
      - hasura
    networks:
      - db_network

  db:
    image: postgis/postgis
    container_name: or_database
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - db_network

  rabbitmq:
    image: rabbitmq:management
    container_name: or_rabbitmq
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    networks:
      - db_network

  hasura:
    container_name: or_hasura
    image: onroadhasura:latest
    build:
      context: ./hasura
      dockerfile: Dockerfile.hasura
      # tags:
      #   - registry.digitalocean.com/or-main/hasura:latest
    restart: unless-stopped
    depends_on:
      - "db"
      - "django"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${JWT_SECRET_KEY}","claims_namespace":"user_claims","claims_format":"json"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 120
      API_HOST: "http://django:9000"
    networks:
      - db_network
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  db_network:
    driver: bridge

volumes:
  postgres:
  rabbitmq:
  caddy_data:
  caddy_config:
