version: "3.9"

services:
  client:
    image: ${REGISTRY_PATH}client:${VERSION:-latest}
    container_name: or_client
    restart: unless-stopped
    depends_on:
      - django
      - hasura
      - caddy
    networks:
      - caddy_network

  django:
    image: ${REGISTRY_PATH}api:${VERSION:-latest}
    container_name: or_django
    restart: unless-stopped
    env_file:
      - path: ./.env
        required: false
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
      - caddy
    networks:
      - postgres_network
      - caddy_network
      - rabbitmq_network
      - redis_network

  worker:
    image: ${REGISTRY_PATH}api:${VERSION:-latest}
    container_name: or_worker
    command: python manage.py rundramatiq
    restart: unless-stopped
    env_file:
      - path: ./.env
        required: false
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db
      - rabbitmq
    networks:
      - rabbitmq_network
      - postgres_network
      - caddy_network

  caddy:
    image: ${REGISTRY_PATH}caddy:${VERSION:-latest}
    restart: unless-stopped
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - TLS=${TLS}
      - TLS_KEY=${TLS_KEY}
      - RATE_LIMIT=${RATE_LIMIT}
    container_name: or_caddy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - caddy_network

  db:
    image: postgres:16
    container_name: or_database
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - postgres_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: or_rabbitmq
    restart: unless-stopped
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    networks:
      - rabbitmq_network
      - caddy_network

  hasura:
    image: ${REGISTRY_PATH}hasura:${VERSION:-latest}
    container_name: or_hasura
    restart: unless-stopped
    depends_on:
      - "db"
      - "django"
      - "caddy"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${JWT_SECRET_KEY}","claims_namespace":"user_claims","claims_format":"json"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 120
      HASURA_GRAPHQL_CORS_DOMAIN: ${CSRF_TRUSTED_ORIGINS}
      API_HOST: "http://django:9000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - postgres_network
      - caddy_network

  redis:
    image: redis:7-alpine
    container_name: or_redis
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - redis_network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: or_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "redis"
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    networks:
      - caddy_network
      - redis_network

networks:
  caddy_network:
    driver: bridge
  redis_network:
    driver: bridge
  postgres_network:
    driver: bridge
  rabbitmq_network:
    driver: bridge

volumes:
  postgres:
  rabbitmq:
  caddy_data:
  caddy_config:
  redis:
